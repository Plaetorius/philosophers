# include <stdbool.h>

# include <pthread.h>

# include <stdio.h>
# include <stdlib.h>
# include <stddef.h>
# include <limits.h>
# include <pthread.h>
# include <stdbool.h>
# include <sys/time.h>
# include <unistd.h>

enum e_actions
{
	TAKEN_FORK,
	EATING,
	SLEEPING,
	THINKING,
	DIED
};

enum e_fork_state
{
	NO_FORK,
	LEFT_FORK,
	RIGHT_FORK,
	BOTH_FORKS
};

typedef struct s_vars	t_vars;
typedef unsigned long	t_ul;

typedef struct s_philo
{
	pthread_t			thread;
	pthread_mutex_t		fork;
	int					nb;
	t_ul				last_eat;
	pthread_mutex_t		mutex_last_eat;
	int					meal_number;
	bool				is_eating;
	enum e_fork_state	fork_state;
	struct s_philo		*next;
	struct s_philo		*prev;
	t_vars				*vars;
}				t_philo;

typedef struct s_vars
{
	int					nb_philo;
	int					ttd;
	int					tte;
	int					tts;
	int					ttf;
	pthread_mutex_t		message;
	t_philo				*philos;
	t_ul				start_time;
	bool				end;
	pthread_mutex_t		mutex_end;
	int					ate_enough;
	pthread_mutex_t		mutex_ate_enough;
	pthread_mutex_t		synchro;
	int					synched;
	pthread_mutex_t		mutex_start_time;
}						t_vars;


typedef unsigned long	t_ul;

/* PARSING */
bool		parsing(int ac, char **av, t_vars *vars);

/* INIT */
bool		init(t_vars *vars);

/* MUTEXES */
int			init_mutexes(t_vars *vars);
int			destroy_mutexes(t_vars *vars);

/* ATOI DEF */
bool		atoi_def(const char *str, int *val);

/* TIME */
bool		print_action(t_philo *philo, int action, t_vars *vars);
bool		ft_usleep(t_ul sleep_time);
bool		get_time(t_ul *val);
bool		set_time_start(t_vars *vars);

/* MEMORY */
bool		memory_cleaning(t_vars *vars);
void		free_philos(t_philo *philo);
int			join_philo_threads(t_vars *vars, int failed_nb);

/* THREADS */
void		*simulation(void *arg);
void		monitor(t_philo *philo, t_vars *vars);
bool		must_simul_end(t_vars *vars);
void		sole_philo(t_philo *philo, t_vars *vars);

/* Actions */
void		eat(t_philo *philo, t_vars *vars);
bool		take_forks(t_philo *philo, t_vars *vars);

/* Synchro */
void		thread_synching(t_vars *vars);

void	eat(t_philo *philo, t_vars *vars)
{
	if (vars->ttf != -1 && philo->meal_number >= vars->ttf)
		return ;
	print_action(philo, EATING, vars);
	pthread_mutex_lock(&philo->mutex_last_eat);
	get_time(&philo->last_eat);
	pthread_mutex_unlock(&philo->mutex_last_eat);
	++(philo->meal_number);
	if (philo->meal_number == vars->ttf)
	{
		pthread_mutex_lock(&vars->mutex_ate_enough);
		++(vars->ate_enough);
		pthread_mutex_unlock(&vars->mutex_ate_enough);
	}
	ft_usleep(vars->tte);
	pthread_mutex_unlock(&philo->next->fork);
	pthread_mutex_unlock(&philo->fork);
}

/*
	Philosophers have their own fork and also take the fork of the next philo
*/
bool	take_forks(t_philo *philo, t_vars *vars)
{
	if (philo->nb % 2)
	{
		pthread_mutex_lock(&philo->next->fork);
		print_action(philo, TAKEN_FORK, vars);
		pthread_mutex_lock(&philo->fork);
		print_action(philo, TAKEN_FORK, vars);
	}
	else
	{
		pthread_mutex_lock(&philo->fork);
		print_action(philo, TAKEN_FORK, vars);
		pthread_mutex_lock(&philo->next->fork);
		print_action(philo, TAKEN_FORK, vars);
	}
	return (true);
}

static bool	aux_atoi_def(const char *str, long *nb, int i)
{
	while ('0' <= str[i] && str[i] <= '9')
	{
		*nb = *nb * 10 + str[i] - '0';
		if (*nb > INT_MAX)
			return (false);
		i++;
	}
	return (true);
}

bool	atoi_def(const char *str, int *val)
{
	long	nb;
	int		i;

	nb = 0;
	i = 0;
	while (str[i] == ' ' || (8 <= str[i] && str[i] <= 13))
		i++;
	if (str[i] == '-')
		return (false);
	else if (str[i] == '+')
		i++;
	if (aux_atoi_def(str, &nb, i) == false)
		return (false);
	*val = nb;
	if (nb == 0)
		return (false);
	return (true);
}


int	join_philo_threads(t_vars *vars, int failed_nb)
{
	int		i;
	int		failed;
	t_philo	*philo;

	i = 0;
	philo = vars->philos;
	if (vars->nb_philo == 1)
		return (0);
	while (i < failed_nb)
	{
		failed = pthread_join(philo->thread, NULL);
		if (failed)
		{
			printf("Failed joining philo %d code %d\n", philo->nb, failed);
			pthread_detach(philo->thread);
		}
		philo = philo->next;
		++i;
	}
	return (failed);
}

/*
	Free Philos
	The condition "philo != NULL" is to protect against a failure that might
	happen when this function is being called in create_philos, in case of a
	malloc fail
*/
void	free_philos(t_philo *philo)
{
	const int	nb_philo = philo->vars->nb_philo;
	int			i;
	t_philo		*tmp;

	i = 0;
	while (i < nb_philo && philo != NULL)
	{
		tmp = philo->next;
		free(philo);
		philo = tmp;
		++i;
	}
	philo = NULL;
}


static t_philo	*new_philo(int nb, t_vars *vars)
{
	t_philo	*philo;

	philo = malloc(sizeof(t_philo));
	if (!philo)
		return (NULL);
	philo->nb = nb;
	philo->meal_number = 0;
	philo->last_eat = 0;
	philo->vars = vars;
	philo->next = philo;
	philo->prev = philo;
	return (philo);
}

static bool	init_philos(t_vars *vars)
{
	int		i;
	t_philo	*philo;

	i = 1;
	while (i < vars->nb_philo + 1)
	{
		philo = new_philo(i, vars);
		if (!philo)
			return (free_philos(vars->philos), false);
		if (vars->philos)
		{
			philo->next = vars->philos;
			philo->prev = vars->philos->prev;
			vars->philos->prev->next = philo;
			vars->philos->prev = philo;
		}
		else
			vars->philos = philo;
		++i;
	}
	return (true);
}

static bool	init_philo_threads(t_vars *vars)
{
	int		i;
	t_philo	*philo;

	i = 0;
	philo = vars->philos;
	while (i < vars->nb_philo)
	{
		if (pthread_create(&philo->thread, NULL, &simulation, (void *)philo))
		{
			join_philo_threads(vars, philo->nb);
			vars->end = true;
			return (false);
		}
		philo = philo->next;
		++i;
	}
	return (true);
}

bool	init(t_vars	*vars)
{
	if (init_philos(vars) == false)
		return (free_philos(vars->philos), false);
	if (init_mutexes(vars) == false)
		return (destroy_mutexes(vars), free_philos(vars->philos), false);
	if (vars->nb_philo == 1)
		sole_philo(vars->philos, vars);
	else
	{
		if (init_philo_threads(vars) == false)
			return (destroy_mutexes(vars), free_philos(vars->philos), false);
		if (set_time_start(vars) == false)
			return (join_philo_threads(vars, vars->nb_philo),
				destroy_mutexes(vars), free_philos(vars->philos), false);
		monitor(vars->philos, vars);
	}
	return (true);
}


static int	init_mutexes_philo(t_vars *vars)
{
	int		i;
	int		ret_value;
	t_philo	*philo;

	philo = vars->philos;
	i = 0;
	while (i < vars->nb_philo)
	{
		ret_value = pthread_mutex_init(&philo->mutex_last_eat, NULL);
		if (ret_value)
			return (printf("Mutex LE failed code %d\n", ret_value));
		ret_value = pthread_mutex_init(&philo->fork, NULL);
		if (ret_value)
			return (printf("Mutex Fork failed code %d\n", ret_value));
		philo = philo->next;
		++i;
	}
	return (true);
}

int	init_mutexes(t_vars *vars)
{
	int		ret_value;

	ret_value = pthread_mutex_init(&vars->synchro, NULL);
	if (ret_value)
		return (printf("Mutex Synchro failed code %d\n", ret_value), ret_value);
	ret_value = pthread_mutex_init(&vars->mutex_end, NULL);
	if (ret_value)
		return (printf("Mutex End failed code %d\n", ret_value), ret_value);
	ret_value = pthread_mutex_init(&vars->mutex_ate_enough, NULL);
	if (ret_value)
		return (printf("Mutex Ate Egh failed code %d\n", ret_value), ret_value);
	ret_value = pthread_mutex_init(&vars->mutex_start_time, NULL);
	if (ret_value)
		return (printf("Mut STT failed code %d\n", ret_value), ret_value);
	ret_value = pthread_mutex_init(&vars->message, NULL);
	if (ret_value)
		return (printf("Mut Mess failed code %d\n", ret_value), ret_value);
	return (init_mutexes_philo(vars));
}

static int	destroy_mutexes_philos(t_vars *vars)
{
	int		i;
	int		ret_value;
	t_philo	*philo;

	philo = vars->philos;
	i = 0;
	while (i < vars->nb_philo)
	{
		ret_value = pthread_mutex_destroy(&philo->mutex_last_eat);
		if (ret_value)
			return (printf("Mut Dest LE Fail code %d\n", ret_value), ret_value);
		ret_value = pthread_mutex_destroy(&philo->fork);
		if (ret_value)
			return (printf("Mut Dest Fk Fail code %d philo %d\n",
					ret_value, philo->nb), ret_value);
		philo = philo->next;
		++i;
	}
	return (0);
}

int	destroy_mutexes(t_vars *vars)
{
	int	ret_value;

	ret_value = pthread_mutex_destroy(&vars->mutex_ate_enough);
	if (ret_value)
		return (printf("Mut Dest AE Fail code %d\n", ret_value), ret_value);
	ret_value = pthread_mutex_destroy(&vars->mutex_end);
	if (ret_value)
		return (printf("Mut Dest End Fail code %d\n", ret_value), ret_value);
	ret_value = pthread_mutex_destroy(&vars->synchro);
	if (ret_value)
		return (printf("Mut Dest Sync Fail code %d\n", ret_value), ret_value);
	ret_value = pthread_mutex_destroy(&vars->mutex_start_time);
	if (ret_value)
		return (printf("Mut Dest STT Fail code %d\n", ret_value), ret_value);
	ret_value = pthread_mutex_destroy(&vars->message);
	if (ret_value)
		return (printf("Mut Dest Mess Fail code %d\n", ret_value), ret_value);
	return (destroy_mutexes_philos(vars));
}

void	set_to_zero(t_vars *vars)
{
	vars->nb_philo = 0;
	vars->ttd = 0;
	vars->tte = 0;
	vars->tts = 0;
	vars->ttf = -1;
	vars->philos = NULL;
	vars->start_time = 0;
	vars->end = false;
	vars->ate_enough = 0;
	vars->synched = 0;
}

bool	parsing(int ac, char **av, t_vars *vars)
{
	set_to_zero(vars);
	if (atoi_def(av[1], &vars->nb_philo) == false)
		return (false);
	if (atoi_def(av[2], &vars->ttd) == false)
		return (false);
	if (atoi_def(av[3], &vars->tte) == false)
		return (false);
	if (atoi_def(av[4], &vars->tts) == false)
		return (false);
	if (ac == 6 && atoi_def(av[5], &vars->ttf) == false)
		return (false);
	vars->ttd *= 1000;
	vars->tte *= 1000;
	vars->tts *= 1000;
	return (true);
}

int	main(int ac, char **av)
{
	t_vars	vars;

	if (ac < 5 || ac > 6)
		return (printf("Not enough parameters\n"), EXIT_FAILURE);
	if (parsing(ac, av, &vars) == false)
		return (printf("Parsing failed\n"), EXIT_FAILURE);
	if (init(&vars) == false)
		return (printf("Init Failed\n"), EXIT_FAILURE);
	join_philo_threads(&vars, vars.nb_philo);
	destroy_mutexes(&vars);
	free_philos(vars.philos);
	return (EXIT_SUCCESS);
}


static bool	are_threads_synched(t_vars *vars)
{
	bool	all_synced;

	pthread_mutex_lock(&vars->synchro);
	all_synced = vars->synched == vars->nb_philo;
	all_synced &= vars->start_time != 0;
	pthread_mutex_unlock(&vars->synchro);
	return (all_synced);
}

void	thread_synching(t_vars *vars)
{
	pthread_mutex_lock(&vars->synchro);
	++(vars->synched);
	pthread_mutex_unlock(&vars->synchro);
	while (!are_threads_synched(vars))
	{
		if (must_simul_end(vars))
			return ;
	}
}


void	sole_philo(t_philo *philo, t_vars *vars)
{
	t_ul	time;

	time = 0;
	get_time(&vars->start_time);
	get_time(&philo->last_eat);
	get_time(&time);
	print_action(philo, TAKEN_FORK, vars);
	while (true)
	{
		get_time(&time);
		if ((int)(time - philo->last_eat) >= vars->ttd)
			break ;
		ft_usleep(200);
	}
	printf("%lu %d died\n", (time - vars->start_time) / 1000, philo->nb);
	vars->end = true;
}

bool	must_simul_end(t_vars *vars)
{
	bool	must_end;

	pthread_mutex_lock(&vars->mutex_end);
	must_end = vars->end;
	pthread_mutex_unlock(&vars->mutex_end);
	pthread_mutex_lock(&vars->mutex_ate_enough);
	if (vars->ate_enough >= vars->nb_philo)
		must_end = true;
	pthread_mutex_unlock(&vars->mutex_ate_enough);
	return (must_end);
}

void	*simulation(void *arg)
{
	t_philo	*philo;
	t_vars	*vars;

	philo = (t_philo *)arg;
	vars = philo->vars;
	thread_synching(philo->vars);
	if (philo->nb % 2 == 0)
		ft_usleep(10000);
	while (!must_simul_end(vars) && take_forks(philo, vars))
	{
		eat(philo, vars);
		print_action(philo, SLEEPING, vars);
		ft_usleep(vars->tts);
		print_action(philo, THINKING, vars);
	}
	return (NULL);
}

void	monitor(t_philo *philo, t_vars *vars)
{
	t_ul	time;

	ft_usleep(20000);
	while (true)
	{
		pthread_mutex_lock(&philo->mutex_last_eat);
		get_time(&time);
		if ((int)(time - philo->last_eat) >= vars->ttd)
		{
			pthread_mutex_unlock(&philo->mutex_last_eat);
			pthread_mutex_lock(&vars->mutex_end);
			vars->end = true;
			pthread_mutex_unlock(&vars->mutex_end);
			pthread_mutex_lock(&vars->message);
			printf("%lu %d died\n", (time - vars->start_time) / 1000,
				philo->nb);
			pthread_mutex_unlock(&vars->message);
			break ;
		}
		pthread_mutex_unlock(&philo->mutex_last_eat);
		if (must_simul_end(vars))
			break ;
		philo = philo->next;
		ft_usleep(200);
	}
}


bool	print_action(t_philo *philo, int action, t_vars *vars)
{
	t_ul	time;

	if (get_time(&time) == false)
		return (false);
	pthread_mutex_lock(&vars->mutex_start_time);
	time = (time - vars->start_time) / 1000;
	pthread_mutex_unlock(&vars->mutex_start_time);
	pthread_mutex_lock(&vars->mutex_end);
	if (vars->end == true)
		return (pthread_mutex_unlock(&vars->mutex_end), true);
	pthread_mutex_unlock(&vars->mutex_end);
	pthread_mutex_lock(&vars->message);
	if (action == TAKEN_FORK)
		printf("%lu %d has taken a fork\n", time, philo->nb);
	else if (action == EATING)
		printf("%lu %d is eating\n", time, philo->nb);
	else if (action == SLEEPING)
		printf("%lu %d is sleeping\n", time, philo->nb);
	else if (action == THINKING)
		printf("%lu %d is thinking\n", time, philo->nb);
	pthread_mutex_unlock(&vars->message);
	return (true);
}

bool	get_time(t_ul *val)
{
	struct timeval	tv;

	if (gettimeofday(&tv, NULL))
		return (false);
	*val = tv.tv_sec * 1000000 + tv.tv_usec;
	return (true);
}

bool	ft_usleep(t_ul sleep_time)
{
	t_ul			start_time;
	t_ul			curr_time;

	if (get_time(&curr_time) == false)
		return (false);
	start_time = curr_time;
	while (start_time + sleep_time > curr_time)
	{
		usleep(sleep_time / 10);
		if (get_time(&curr_time) == false)
			return (false);
	}
	return (true);
}

bool	set_time_start(t_vars *vars)
{
	int		i;
	t_philo	*philo;

	pthread_mutex_lock(&vars->synchro);
	if (get_time(&vars->start_time) == false)
		return (pthread_mutex_unlock(&vars->synchro), false);
	pthread_mutex_unlock(&vars->synchro);
	i = 0;
	philo = vars->philos;
	while (i < vars->nb_philo)
	{
		pthread_mutex_lock(&philo->mutex_last_eat);
		if (get_time(&philo->last_eat) == false)
			return (pthread_mutex_unlock(&philo->mutex_last_eat), false);
		pthread_mutex_unlock(&philo->mutex_last_eat);
		philo = philo->next;
		++i;
	}
	return (true);
}
